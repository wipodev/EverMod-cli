import os
import sys
from pathlib import Path
from xml.sax.saxutils import escape

def run(project_path: str = "."):
    base_path = Path(project_path).resolve()
    project_name = base_path.name
    src_path = base_path / "src"

    if not src_path.exists():
        print(f"‚ùå 'src' folder not found in {base_path}")
        return

    output_file = base_path / f"{project_name}-evermix.xml"
    all_files = []

    # Collect all source files inside src/
    for root, _, files in os.walk(src_path):
        for file in files:
            if file.endswith((".java", ".kt", ".py", ".json", ".xml", ".gradle", ".md")):
                full_path = Path(root) / file
                all_files.append(full_path)

    if not all_files:
        print("‚ö†Ô∏è  No relevant files found inside 'src/'.")
        return

    print(f"üß© Generating EverMix for '{project_name}' with {len(all_files)} files...")

    with open(output_file, "w", encoding="utf-8") as out:
        # XML header
        out.write('<?xml version="1.0" encoding="UTF-8"?>\n')
        out.write("<project>\n")

        # ===== CONTEXT SECTION =====
        intro = f"""
  <context>
    This XML file was automatically generated by EverMix, the source consolidation system
    of the EverMod framework.

    It contains the full content of the project "{project_name}", which is a Minecraft mod
    developed in Java using Forge, structured according to the EverMod framework conventions.

    The purpose of this file is to provide context to an artificial intelligence system
    for analysis, documentation, or refactoring tasks.

    Each <file> block below contains the complete source content of one file located
    under the project's 'src/' directory.
  </context>
"""
        out.write(intro)

        # ===== STRUCTURE SECTION =====
        out.write("  <structure>\n")
        for path in all_files:
            rel_path = path.relative_to(base_path)
            out.write(f"    <path>{rel_path}</path>\n")
        out.write("  </structure>\n\n")

        # ===== FILE CONTENT SECTION =====
        for path in all_files:
            rel_path = path.relative_to(base_path)
            try:
                content = path.read_text(encoding="utf-8", errors="ignore")
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not read {path}: {e}")
                continue
            escaped_content = escape(content)
            out.write(f'  <file name="{rel_path}">\n')
            out.write(f"{escaped_content}\n")
            out.write("  </file>\n")

        out.write("</project>\n")

    print(f"‚úÖ EverMix file generated successfully: {output_file}")
